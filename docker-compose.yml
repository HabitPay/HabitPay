version: "3"

services:
  nginx:
    container_name: nginx
    image: nginx:stable-alpine-perl
    restart: on-failure:3
    networks:
      - backend-connection
    volumes:
      - ./backend/nginx/:/etc/nginx/conf.d/
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      postgres:
        condition: service_healthy
      blue:
        condition: service_healthy

  certbot:
    image: certbot/certbot:latest
    command: certonly --webroot --webroot-path=$$WEBROOT_PATH --email $$EMAIL --agree-tos --no-eff-email -d $$DOMAIN
    env_file:
      - ./env/.env.certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./data/certbot/logs:/var/log/letsencrypt

  blue:
    container_name: blue
    image: backend # TODO: Docker Hub Registry 연결
    ports:
      - $$BLUE_PORT:$$BLUE_PORT
    restart: on-failure:3
    healthcheck:
      test: "curl --fail --silent blue/actuator/health | grep UP || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - backend-connection
      - db-connection
    env_file:
      - ./env/.env.backend
      - ./env/.env.db
    depends_on:
      postgres:
        condition: service_healthy

  green:
    container_name: green
    image: backend # TODO: Docker Hub Registry 연결
    ports:
      - $$GREEN_PORT:$$GREEN_PORT
    restart: on-failure:3
    healthcheck:
      test: "curl --fail --silent green/actuator/health | grep UP || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - backend-connection
      - db-connection
    env_file:
      - ./env/.env.backend
      - ./env/.env.db
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres:16.2-alpine3.18
    restart: on-failure:3
    expose:
      - $$POSTGRES_PORT
    networks:
      - db-connection
    healthcheck:
      test: pg_isready -h 127.0.0.1 -d $$POSTGRES_DB -U $$POSTGRES_USER
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      TZ: "Asia/Seoul"
    env_file:
      - ./env/.env.db

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: on-failure:3
    ports:
      - $$PGADMIN_PORT:80
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    env_file:
      - ./env/.env.pgadmin
    networks:
      - db-connection
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres-data:
  pgadmin-data:

networks:
  backend-connection:
    driver: bridge
  db-connection:
    driver: bridge
