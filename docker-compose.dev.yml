version: "3"

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    image: frontend
    ports:
      - 3000:3000
    restart: on-failure:3
    volumes:
      - ./frontend:/usr/app
    networks:
      - front-connection
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    image: backend
    ports:
      - 8080:8080
    restart: on-failure:3
    networks:
      - front-connection
      - db-connection
    env_file:
      - ./env/.env.backend.dev
      - ./env/.env.db.dev
    volumes:
      - ./backend:/usr/app
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres:16.2-alpine3.18
    restart: on-failure:3
    expose:
      - $$POSTGRES_PORT
    networks:
      - db-connection
    healthcheck:
      test: pg_isready -h 127.0.0.1 -d $$POSTGRES_DB -U $$POSTGRES_USER
      start_period: 15s
      interval: 1m
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      TZ: "Asia/Seoul"
    env_file:
      - ./env/.env.db.dev

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: on-failure:3
    ports:
      - 5050:80
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    env_file:
      - ./env/.env.pgadmin
    networks:
      - front-connection
      - db-connection
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres-data:
  pgadmin-data:

networks:
  front-connection:
    driver: bridge
  db-connection:
    driver: bridge
